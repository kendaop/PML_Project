plot(1:nrow(training.data), rep(0, nrow(training.data), type="p", type="n"))
plot(1:nrow(training.data), rep(0, nrow(training.data), type="n"))
plot(1:nrow(training.data), rep(0, nrow(training.data), type="o"))
?par
plot(1:nrow(training.data), rep(0, nrow(training.data), type="n"))
intrain
points(intrain, rep(0, length(intrain), col="green"))
points(intrain, rep(1, length(intrain), col="green"))
points(intrain, rep(1, length(intrain), col="green", pch=21))
points(intrain, rep(1, length(intrain), col="green", pch=22))
points(intrain, rep(1, length(intrain), color="green", pch=22))
points(intrain, rep(0.5, length(intrain), color="green", pch=22))
points(intrain, rep(0.5, length(intrain), fill="green", pch=22))
points(intrain, rep(0.0.25, length(intrain), fill="green", pch=22))
points(intrain, rep(0.025, length(intrain), fill="green", pch=22))
points(intrain, rep(-0.25, length(intrain), fill="green", pch=19))
training.data$max_roll_belt
sapply(training.data$max_roll_belt, is.na)
get("training.data")
get("training.data")$max_roll_belt
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
train[,18]
P.Complete("train", 18)
source('~/Git/PML_Project/script.R')
P.Complete("train", 18)
source('~/Git/PML_Project/script.R')
P.Complete("train", 18)
sum(P.Complete("train", 18))
source('~/Git/PML_Project/script.R')
P.Complete("train", 18)
248/nrow(training.data)
248/nrow(train)
train[,18]
name(train[,18])
names(train[,18])
names(train)
train[,18]
is.an(train[,18])
is.na(train[,18])
!is.na(train[,18])
sum(!is.na(train[,18]))
nrow(train)
239/11776
P.Complete("train", 18)
P.Complete("train", 18)
source('~/Git/PML_Project/script.R')
P.Complete("train", 18)
source('~/Git/PML_Project/script.R')
P.Complete("train", 18)
P.Complete("train", 2)
P.Complete("train", 3)
P.Complete("train", 4)
P.Complete("train", 5)
P.Complete("train", 6)
P.Complete("train", 7)
P.Complete("train", 8)
P.Complete("train", 9)
P.Complete("train", 10)
P.Complete("train", 11)
P.Complete("train", 12)
P.Complete("train", 13)
P.Complete("train", 14)
P.Complete("train", 15)
P.Complete("train", 1)
P.Complete("train", 16)
P.Complete("train", 17)
P.Complete("train", 18)
P.Complete("train", 19)
P.Complete("train", 20)
P.Complete("train", 21)
P.Complete("train", 22)
P.Complete("train", 23)
P.Complete("train", 24)
P.Complete("train", 25)
P.Complete("train", 26)
sapply(train, P.Complete)
sapply(names(train), P.Complete)
sapply("train", P.Complete)
get("train")
index
source('~/Git/PML_Project/script.R')
sapply(train, P.Complete)
sapply(train, P.Complete, 1:ncol(train))
tapply(train, 1:ncol(train), P.Complete)
?complete.cases
complete.cases
complete.cases()
complete.cases(c(1,2,3,NA))
complete.cases(c(1,2,3,NA), 1:4, 1:4, c(1:4, NA))
complete.cases(c(1,2,3,NA), 1:4, 1:4, c(1:3, NA))
complete.cases(c(1,2,3,NA), c(1:4), c(1:4), c(1:3, NA))
complete.cases(train[,18])
sum(complete.cases(train[,18]))
complete.cases(train)
sum(complete.cases(train[,18]))
sum(i.na(train[,18]))
sum(is.na(train[,18]))
sum(!is.na(train[,18]))
source('~/Git/PML_Project/script.R')
P.Complete(train[,18])
complete.cases(train[,18])
sum(complete.cases(train[,18]))
sum(!is.na(train[,18]))
source('~/Git/PML_Project/script.R')
P.Complete(train[,18])
is.na(train[,18])
!is.na(train[,18])
sum(!is.na(train[,18]))
sum(!is.na(train[,18])) / nrow(train)
?sapply
?vapply
vapply(train, P.Complete)
sapply(train, P.Complete)
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
P.Complete(train)
sum(complete.cases(train[,18])) / length(train[,18])}
sum(complete.cases(train[,18])) / length(train[,18])
sum(complete.cases(train[,18]))
sum(!is.na(train[,18]))
sum(complete.cases(train[,18])) / nrow(train[,18])
sum(complete.cases(train[,18])) / nrow(train)
source('~/Git/PML_Project/script.R')
P.Complete(train)
P.Complete(train, 18)
P.Complete(train, 1)
weights = 1 / P.Complete(train)
weights
names(train)
names(getModelInfo())
class(train$classe)
source('~/Git/PML_Project/script.R')
nrow(train)
ncol(train)
length(weights)
source('~/Git/PML_Project/script.R')
warnings()
source('~/Git/PML_Project/script.R')
install.packages("doParallel")
source('~/Git/PML_Project/script.R')
detach("package:doParallel", unload=TRUE)
library("doParallel", lib.loc="~/R/win-library/3.1")
source('~/Git/PML_Project/script.R')
rm(intrain)
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
modelfit
modelFit$predictors
modelfit$predictors
modelfit$predict
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
prediction
table(prediction, test)
table(prediction, test$classe)
length(prediction)
modelfit
prediction
test[,"classe"]
?complete.case
complete
?complete
test[1,]
is.na(test[1,])
complete.cases(test[1,])
complete.cases(rep(1,10))
complete.cases(c(rep(1,10)))
complete.cases(test)
sum(complete.cases(test))
table(predictions, test[complete.cases(test),])
table(prediction, test[complete.cases(test),])
test[complete.cases(test),]
test[complete.cases(test), "classe"]
table(prediction, test[complete.cases(test), "classe"])
table(prediction, actual=test[complete.cases(test), "classe"])
begin = Sys.time()
end=Sys.time()
message(sprintf("Time to fit model: %d minutes %d seconds.", (end - begin) / 60000, (end - begin) %% 60000))
begin
end-begin
end-begin/5
(end-begin)/5
?timediff
?difftime
format(end - begin)
as.difftime(end-begin, units="mins")
as.difftime(end-begin, units="secs")
begin
as.difftime(end-begin, format="%Y-%m-%d %H:%M:%S", units="secs")
as.difftime(end-begin, format="%Y-%m-%d %H:%M:%S", units="mins")
format(as.difftime(end-begin, format="%Y-%m-%d %H:%M:%S", units="mins"))
as.numeric(end-begin, units="mins")
as.numeric(end-begin, units="secs")
message(sprintf("Time to fit model: %d minutes %d seconds.", floor(as.numeric(end-begin, units="mins")), floor(as.numeric(end-begin, units="secs")) %% 60))
end=Sys.time()
message(sprintf("Time to fit model: %d minutes %d seconds.", floor(as.numeric(end-begin, units="mins")), floor(as.numeric(end-begin, units="secs")) %% 60))
rm(begin,end)
detectCores()
message(sprintf("Time to fit model, with %d cores: %d minutes %d seconds.", floor(as.numeric(end-begin, units="mins")), floor(as.numeric(end-begin, units="secs")) %% 60, detectCores()))
begin=Sys.time()
end=Sys.time() + 1000
message(sprintf("Time to fit model, with %d cores: %d minutes %d seconds.", floor(as.numeric(end-begin, units="mins")), floor(as.numeric(end-begin, units="secs")) %% 60, detectCores()))
message(sprintf("Time to fit model, with %d cores: %d minutes %d seconds.", floor(as.numeric(end-begin, units="mins")), floor(as.numeric(end-begin, units="secs")) %% 60, detectCores()))
message(sprintf("Time to fit model, with %d cores: %d minutes %d seconds.", detectCores(), floor(as.numeric(end-begin, units="mins")), floor(as.numeric(end-begin, units="secs")) %% 60))
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
as.numeric(end - begin)
times
c(times, as.numeric(end-begin))
times = c(times, as.numeric(end-begin))
times
times = c(times, as.numeric(end-begin))
times
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
detach("package:doParallel", unload=TRUE)
source('~/Git/PML_Project/script.R')
?detectCores
detach("package:doParallel", unload=TRUE)
library("doParallel", lib.loc="~/R/win-library/3.1")
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
Prediction.Summary(prediction, test)
source('~/Git/PML_Project/script.R')
prediction
length(predication)
length(prediction)
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
t
print(t)
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
warnings()
source('~/Git/PML_Project/script.R')
test.data
which(complete.cases(test.data))
complete.cases(test.data)
complete.cases(test.data[,1])
test.data[,names(test.data)]
sapply(test.data[,names(test.data)], sum)
sapply(test.data[,names(test.data)], complete.cases)
class(sapply(test.data[,names(test.data)], complete.cases))
sapply(sapply(test.data[,names(test.data)], complete.cases), sum)
for(i in 1:ncol(test.data)) {
sum(complete.cases(test.data))
}
complete.cases(test.data)
complete.cases(test.data[,1])
complete.cases(test.data[,2])
counts = rep(NA, ncol(test.data))
for(i in 1:ncol(test.data)) {
counts[i] = sum(complete.cases(test.data[,i]))
}
counts
counts == 20
keepers = counts == 20
keepers
sum(keepers)
RESET=T
rm(intrain, test, test.data, train, training.data, begin, cl, counts)
rm(end, i, modelfit, prediction, t, testurl, times, url, weights)
source('~/Git/PML_Project/script.R')
length(tprediction)
length(test.data[complete.cases(test.data), "classe"])
names(test.data)
test.data
print(table(prediction, test_df[complete.cases(test_df), "problem_id"]))
print(table(prediction, test.data[complete.cases(test.data), "problem_id"]))
test.data[complete.cases(test.data), "problem_id"]
print(table(tprediction, test.data[complete.cases(test.data), "problem_id"]))
RESET = F
Prediction.Summary(prediction, test)
tprediction
source('~/Git/PML_Project/script.R')
tprediction
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
tprediction[1] "B"
tprediction[1] = "B"
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
RESET = T
source('~/Git/PML_Project/script.R')
tprediction
prediction
test$classe
names(training.data)
tail(training.data[,1])
tail(training.data)
counts = rep(NA, ncol(test.data))
for(i in 1:ncol(test.data)) {
counts[i] = sum(complete.cases(test.data[,i]))
}
counts
counts = rep(NA, ncol(training.data))
for(i in 1:ncol(test.data)) {
counts[i] = sum(complete.cases(training.data[,i]))
}
counts
counts = rep(NA, ncol(test.data))
for(i in 1:ncol(test.data)) {
counts[i] = sum(complete.cases(test.data[,i]))
}
counts
counts = rep(NA, ncol(test.data))
for(i in 1:ncol(test.data)) {
counts[i] = sum(complete.cases(test.data[,i]))
}
counts
test.data
counts = rep(NA, ncol(training.data))
for(i in 1:ncol(test.data)) {
counts[i] = sum(complete.cases(training.data[,i]))
}
counts
counts = rep(NA, ncol(test))
for(i in 1:ncol(test.data)) {
counts[i] = sum(complete.cases(test[,i]))
}
counts
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
counts
keepers = rep(NA, ncol(test.data))
for(i in 1:ncol(test.data)) {
keepers[i] = sum(complete.cases(test.data[,i])) == 20
}
keepers
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
keepers
source('~/Git/PML_Project/script.R')
keepers
source('~/Git/PML_Project/script.R')
keepers
-keepers
names(test.data[,-keepers])
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
training.data[,-seq(1,10)]
x = training.data[,-seq(1,10)]
keepers
x = training.data[,-rep(FALSE, 160)]
x
names(train)
keepers
sum(keepers)
source('~/Git/PML_Project/script.R')
keepers
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
keepers
x = data.frame(1=c(1), 2=c(2), 3=c(3))
x = data.frame(c(1), c(2), c(3))
x
x[,-c(TRUE, FALSE, FALSE)]
x[,-c(FALSE, FALSE, FALSE)]
x[,-c(FALSE, FALSE, TRUE)]
x[,-c(TRUE, FALSE, TRUE)]
x[,-c(TRUE, TRUE, TRUE)]
-c(T, T, F)
x[,c(-1,-1,0)]
x[,c(-1,-1,-1)]
x[,c(-1,-2,-3)]
x[,c(T,T,F)]
source('~/Git/PML_Project/script.R')
names(train)
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
head$test
head(test)
names(train)
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
names(train)
intrain = createDataPartition(train$classe, p=0.6, list=F)
intrain
train[-intrain,]
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
keepers
source('~/Git/PML_Project/script.R')
source('~/Git/PML_Project/script.R')
names(train)
source('~/Git/PML_Project/script.R')
RESET =T
source('~/Git/PML_Project/script.R')
17+10+2+18+5+2+18+2
74/7846
tprediction
featurePlot(x=train[,1:3], y=train$classe, plot="pairs")
featurePlot(x=train[,c(1:3, "classe"], y=train$classe, plot="pairs")
featurePlot(x=train[,c(1:3, "classe")], y=train$classe, plot="pairs")
featurePlot(x=train[,c(1,2,3,"classe")], y=train$classe, plot="pairs")
featurePlot(x=train[,c("roll_belt", "pitch_belt", "yaw_belt")], y=train$classe, plot="pairs")
featurePlot(x=train[,c("roll_belt", "pitch_belt", "yaw_belt", "classe")], y=train$classe, plot="pairs")
?cor
cor(train)
cor(train[,-"classe"])
cor(train[,names(train) != "classe"])
?nearZeroVar
nearZeroVar(train[,-ncol(train)])
nearZeroVar(train[, names(train) != "classe"])
cors = cor(train[,names(train) != "classe"])
class)cors
class(cors)
cors^2
sapply(cors, function(x) {1-x})
cors = data.frame(cor(train[,names(train) != "classe"]))
head(cors)
1-cors
cors = data.frame(cor(train[,names(train) != "classe"]))
cors
cors = 1-cors
cors
cors =1 - (data.frame(cor(train[,names(train) != "classe"])) ^ 2)
cors
cors = data.frame(cor(train[,names(train) != "classe"]))
cors
cors = abs(data.frame(cor(train[,names(train) != "classe"])))
cors
cors = 1 - abs(data.frame(cor(train[,names(train) != "classe"])))
cors
min(cors)
cors =abs(data.frame(cor(train[,names(train) != "classe"])))
cors
sum(cors)
sapply(cors, sum)
max(sapply(cors, sum))
order(sapply(cors, sum))
sort(sapply(cors, sum))
sort(sapply(cors, sum), decreasing=T)
totalcors = sort(sapply(cors, sum), decreasing=T)
totalcors
totalcors[1]
names(totalcors[1:3])
drops = c(drops, names(totalcors[1:23]))
drops
RESET=T
drops = c("X", "user_name", "raw_timestamp_part_1", "raw_timestamp_part_2", "cvtd_timestamp", "new_window", "num_window")
drops = c(drops, names(totalcors[1:23]))
drops = c("X", "user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","new_window","num_window", "accel_belt_z","roll_belt", "accel_belt_y","accel_arm_y","total_accel_belt","yaw_belt","accel_dumbbell_z","accel_belt_x","pitch_belt","magnet_belt_x","yaw_dumbbell","magnet_dumbbell_x","accel_dumbbell_y","magnet_dumbbell_y", "total_accel_dumbbell","accel_forearm_x","accel_dumbbell_x","gyros_belt_x","gyros_belt_y","accel_arm_x","magnet_dumbbell_z","gyros_arm_z","gyros_forearm_x")
drops
RESET = T
source('~/Git/PML_Project/script.R')
errors()
source('~/Git/PML_Project/script.R')
Prediction.Summary(prediction, test)
Prediction.Summary = function(prediction, test_df) {
print(table(prediction, test_df[complete.cases(test_df), "classe"]))
}
source('~/Git/PML_Project/script.R')
Prediction.Summary(prediction, test)
23+4+4+16+2+8+47+2+2+11+5+2+1
127/length(prediction)
drops
cors
cors = abs(data.frame(cor(train[,names(train) != "classe"])))
totalcors = sort(sapply(cors, sum), decreasing=T)
totalcors
drops = c(drops, names(totalcors[1:15]))
tprediction
tprediction = predict(modelfit, test.data)
tprediction
rm(cors, intrain, test, train)
source('~/Git/PML_Project/script.R')
warnings()
50+5+8+7+27+11+8+26+46+4+9+4+15+7+1+12+4+16
260/length(prediction)
training.data[, !names(training.data) %in% drops]
ncol(training.data[, !names(training.data) %in% drops])
RESET=T
source('~/Git/PML_Project/script.R')
